/Users/avio./dev/exodus-ai-game/src/App.tsx:
import React, { useCallback, useEffect, useState } from "react";
import { Outlet, useParams } from "react-router-dom";
import { RootStore } from "./store/models/RootStore";
import { RootStoreProvider } from "./store/commom/RootStoreContext";
import appBackground from "./assets/images/app-bg.png";

export const rootStore = RootStore.create({
  Interactions: [
    {
      text: "",
      options: [
        { text: "התחל" },
      ]
    },
  ]
});


const App = () => {
  useEffect(() => {
    // // Fetch the initial stage
    // rootStore.fetchNewStage("start").catch(error => {
    //   console.error("Failed to fetch initial stage:", error);
    // });
  }, []);

  return (
    <RootStoreProvider value={rootStore}>
      <div
        style={{
          backgroundImage: `url(${appBackground})`,
          backgroundSize: "cover",
          backgroundRepeat: "no-repeat",
          backgroundPosition: "center",
          minHeight: "100vh",
        }}
      >
        <Outlet />
      </div>
    </RootStoreProvider>
  );
};

export default App;


/Users/avio./dev/exodus-ai-game/src/main.tsx:
import React from "react";
import ReactDOM from "react-dom/client";
import "regenerator-runtime/runtime";
import { browserRouter } from "./Router";
import { RouterProvider } from "react-router-dom";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <RouterProvider router={browserRouter} />
);


/Users/avio./dev/exodus-ai-game/src/Router.tsx:
import { Home } from "./pages/Home";
import { NotFound } from "./pages/NotFound";
import React from "react";
import ReactDOM from "react-dom/client";
import { createBrowserRouter, RouterProvider } from "react-router-dom";
import App from "./App";
import { Test } from "./pages/Test";
import { Scenes } from "./pages/Scenes";

export const browserRouter = createBrowserRouter([
  {
    element: <App />,
    children: [
      {
        path: "/",
        element: <Home />,
      },
      {
        path: "/home",
        element: <Home />,
      },

      {
        path: "/scenes",
        element: <Scenes />,
      },
      {
        path: "/scenes/:key",
        element: <Home />,
      },

      { path: "*", element: <NotFound /> },
    ],
  },
]);


/Users/avio./dev/exodus-ai-game/src/vite-env.d.ts:
/// <reference types="vite/client" />


/Users/avio./dev/exodus-ai-game/src/components/ContainerBGImage.tsx:
interface ContainerBGImageProps {
  bgImage: string;
  children: React.ReactNode;
}

const ContainerBGImage = ({ bgImage, children }: ContainerBGImageProps) => {
  return (
    <div
      className="flex flex-row h-full w-full overflow-x-hidden"
      style={{
        backgroundImage: `linear-gradient(rgba(200, 200, 200, 0.6), rgba(200, 200, 200, 0.6)), url(${bgImage})`,
        backgroundSize: "cover",
      }}
    >
      {children}
    </div>
  );
};

export { ContainerBGImage };


/Users/avio./dev/exodus-ai-game/src/components/InteractionButton.tsx:
import React from "react";
import { Button } from "./core/Button";
import { Avatar, AvatarFallback, AvatarImage } from "./Avatar";
import boyProfileField from "../assets/images/boy-avatar.png";

interface InteractionButtonProps {
  onClick: () => void;
  text: string;
  disabled?: boolean;
  isActive?: boolean;
}

const InteractionButton: React.FC<InteractionButtonProps> = ({
  onClick,
  text,
  disabled = false,
  isActive = false,
}) => {
  return (
    <div className="flex flex-row  w-full space-x-2">
      {isActive && !disabled && (
        <div className="">
          <Avatar className="w-9 h-9">
            <AvatarImage alt="Chosen" src={boyProfileField} />
            <AvatarFallback>SS</AvatarFallback>
          </Avatar>
        </div>
      )}
      <Button disabled={disabled} onClick={onClick}>
        {text}
      </Button>

    </div>
  );
};

export { InteractionButton };

/Users/avio./dev/exodus-ai-game/src/components/ThinkingIndicator.tsx:
import React, { forwardRef } from 'react';

const ThinkingIndicator = forwardRef<HTMLDivElement>((props, ref) => {
  return (
    <div ref={ref} className="text-right text-white text-2xl mt-2 animate-pulse animate-faster" style={{direction:"rtl"}}>
      חושב...
    </div>
  );
});

export { ThinkingIndicator };

/Users/avio./dev/exodus-ai-game/src/components/GameView.tsx:
import React, { useEffect, useRef } from "react";
import { observer } from "mobx-react-lite";
import { IOption } from "../store/models/Option";
import { useRootStore } from "../store/commom/RootStoreContext";
import profileField from "../assets/images/adult-avatar.png";
import { StageElement } from "./StageElement";
import { InteractionContainer } from "./InteractionContainer";
import { NPCAvatar } from "./NPCAvatar";
import { ThinkingIndicator } from "./ThinkingIndicator";
import { Stage } from "./Stage";
import { InteractionLayout } from "./InteractionLayout";
import scrollBackground from "../assets/images/scroll.png";

interface Props {
  onOptionClick: (option: IOption) => void;
  scrollContainerRef: React.RefObject<HTMLDivElement>;
  chatId: string;
  bgImage: string;
  avatarImage: string;
  avatarThumb: string;
  avatarName: string;
  avatarDescription: string;
}

const GameView: React.FC<Props> = observer(
  ({
    onOptionClick,
    scrollContainerRef,
    bgImage,
    avatarImage,
    avatarThumb,
    avatarName,
    avatarDescription,
  }) => {
    const { Interactions, isLoading } = useRootStore();
    const thinkingIndicatorRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
      if (isLoading && thinkingIndicatorRef.current) {
        thinkingIndicatorRef.current.scrollIntoView({
          behavior: "smooth",
          block: "end",
        });
      } else if (!isLoading && scrollContainerRef.current) {
        const lastInteractionContainer =
          scrollContainerRef.current.lastElementChild;
        if (lastInteractionContainer) {
          lastInteractionContainer.scrollIntoView({
            behavior: "smooth",
            block: "end",
          });
        }
      }
    }, [isLoading]);

    return (
      <div className="flex flex-row w-full space-x-5">
        <div className="w-8/12 flex flex-col items-center justify-center px-4 mt-2">
          <Stage avatarImage={avatarImage} bgImage={bgImage} />
        </div>
        <div
          className="w-4/12 flex flex-col h-full overflow-y-auto text-white mt-1"
          style={{
            backgroundImage: `url(${scrollBackground})`,
            backgroundSize: "100% 100%",
            backgroundRepeat: "no-repeat",
            backgroundPosition: "center",
            padding: "6vh 4vw",
          }}
        >
          <NPCAvatar
            image={avatarThumb}
            name={avatarName}
            description={avatarDescription}
          />
          <div className="flex-grow overflow-y-auto" ref={scrollContainerRef}>
            {Interactions.map((stage, stageIndex) => (
              <InteractionContainer
                key={stageIndex}
                interaction={stage}
                onOptionClick={onOptionClick}
              />
            ))}
            {isLoading && <ThinkingIndicator ref={thinkingIndicatorRef} />}
          </div>
        </div>
      </div>
    );



  }
);

export default GameView;


/Users/avio./dev/exodus-ai-game/src/components/ContentContainer.tsx:
interface ContentContainerProps {
  children: React.ReactNode;
}

const ContentContainer: React.FC<ContentContainerProps> = ({ children }) => {
  return (
    <main className="flex-1 overflow-y-scroll antialiased">{children}</main>
  );
};

export { ContentContainer };


/Users/avio./dev/exodus-ai-game/src/components/SceneListItem.tsx:
// src/components/SceneListItem.tsx
import React from "react";
import { Link } from "react-router-dom";
import { Instance } from "mobx-state-tree";
import { Scene } from "../store/models/Scene";

interface SceneListItemProps {
  scene: Instance<typeof Scene>;
}

const SceneListItem: React.FC<SceneListItemProps> = ({ scene }) => {
  return (
    <Link
      to={`/scenes/${scene.key}`}
      className="flex mb-4  bg-emerald-800  bg-opacity-50 rounded-xl p-2 hover:bg-opacity-70 transition-all duration-200"
    >
      <div className="w-1/2 pr-4 flex flex-col justify-start space-x-3">
        <h2 className="text-3xl py-2 px-2">{scene.name}</h2>
        <p className="text-lg">{scene.description}</p>
      </div>
      <div className="w-1/2">
        <div className="aspect-w-16 aspect-h-9">
          <img src={scene.image} alt={scene.name} className="w-full h-full object-cover rounded-xl" />
        </div>
      </div>
    </Link>
  );
};

export { SceneListItem };

/Users/avio./dev/exodus-ai-game/src/components/InteractionContainer.tsx:
// src/components/InteractionContainer.tsx
import React from "react";
import { IInteraction } from "../store/models/Interaction";
import AgentTextBubble from "./AgentTextBubble";
import { InteractionButton } from "./InteractionButton";
import { IOption } from "../store/models/Option";

interface InteractionContainerProps {
  interaction: IInteraction;
  onOptionClick: (option: IOption) => void;
}

const InteractionContainer: React.FC<InteractionContainerProps> = ({
  interaction,
  onOptionClick,
}) => {
  return (
    <div className="text-right space-y-2 mb-3.5">
      {interaction.text && <AgentTextBubble text={interaction.text} />}
      <div className="flex flex-col items-end space-y-2.5">
        {interaction.options.map((option, optionIndex) => (
          <InteractionButton
            key={optionIndex}
            onClick={() => onOptionClick(option)}
            text={option.text}
            disabled={option.disabled}
            isActive={option.chosen}
          />
        ))}
      </div>
    </div>
  );
};

export { InteractionContainer };

/Users/avio./dev/exodus-ai-game/src/components/InteractionLayout.tsx:
// src/components/InteractionLayout.tsx
import React from "react";
import { IInteraction } from "../store/models/Interaction";
import { InteractionContainer } from "./InteractionContainer";
import { NPCAvatar } from "./NPCAvatar";
import { ThinkingIndicator } from "./ThinkingIndicator";
import scrollBackground from "../assets/images/scroll.png";
import { IOption } from "../store/models/Option";

interface InteractionLayoutProps {
  avatarThumb: string;
  avatarName: string;
  avatarDescription: string;
  interactions: IInteraction[];
  onOptionClick: (option: IOption) => void;
  isLoading: boolean;
  scrollContainerRef: React.RefObject<HTMLDivElement>;
  thinkingIndicatorRef: React.RefObject<HTMLDivElement>;
}

const InteractionLayout: React.FC<InteractionLayoutProps> = ({
  avatarThumb,
  avatarName,
  avatarDescription,
  interactions,
  onOptionClick,
  isLoading,
  scrollContainerRef,
  thinkingIndicatorRef,
}) => {
  return (
    <div
      className="w-full px-11 pt-11 pb-20 h-full rounded-lg text-white overflow-hidden bg-scroll bg-contain bg-no-repeat bg-top flex flex-col items-end"
      style={{
        backgroundImage: `url(${scrollBackground})`,
        direction: "rtl",
      }}
    >
      <NPCAvatar
        image={avatarThumb}
        name={avatarName}
        description={avatarDescription}
      />
      <div className="flex-grow overflow-y-auto" ref={scrollContainerRef}>
        {interactions.map((stage, stageIndex) => (
          <InteractionContainer
            key={stageIndex}
            interaction={stage}
            onOptionClick={onOptionClick}
          />
        ))}
        {isLoading && <ThinkingIndicator ref={thinkingIndicatorRef} />}
      </div>
    </div>
  );
};

export { InteractionLayout };

/Users/avio./dev/exodus-ai-game/src/components/Avatar.tsx:
import * as React from 'react';
import * as AvatarPrimitive from '@radix-ui/react-avatar';

interface AvatarProps extends React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root> {
  className?: string;
}

const Avatar = React.forwardRef<HTMLDivElement, AvatarProps>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    {...props}
    ref={ref}
    className={`relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full ${className}`}
  />
));

Avatar.displayName = 'Avatar';

interface AvatarImageProps extends React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image> {
  className?: string;
}

const AvatarImage = React.forwardRef<HTMLImageElement, AvatarImageProps>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    {...props}
    ref={ref}
    className={`aspect-square h-full w-full object-cover ${className}`}
  />
));

AvatarImage.displayName = 'AvatarImage';

interface AvatarFallbackProps extends React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback> {
  className?: string;
}

const AvatarFallback = React.forwardRef<HTMLDivElement, AvatarFallbackProps>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    {...props}
    ref={ref}
    className={`flex h-full w-full items-center justify-center rounded-full bg-gray-100 dark:bg-gray-800 ${className}`}
  />
));

AvatarFallback.displayName = 'AvatarFallback';

export { Avatar, AvatarImage, AvatarFallback };


/Users/avio./dev/exodus-ai-game/src/components/AgentTextBubble.tsx:
import React from "react";
import { Avatar, AvatarFallback, AvatarImage } from "@radix-ui/react-avatar";
import profileField from "../assets/images/adult-avatar.png";

interface AgentTextBubbleProps {
  text: string;
}

const AgentTextBubble: React.FC<AgentTextBubbleProps> = ({ text }) => {
  return (
    <div className="flex flex-row text-right">
      <div className="text-3xl mb-2 w-11/12" style={{ direction: 'rtl' }}>{text}</div>
      <Avatar className="ml-3 mt-2 w-10">
        <AvatarImage alt="Spice Seller" src={profileField} />        
      </Avatar>

    </div>
  );
};

export default AgentTextBubble;


/Users/avio./dev/exodus-ai-game/src/components/Stage.tsx:
// src/components/Stage.tsx
import React, { useEffect, useRef } from "react";
import Phaser from "phaser";

interface StageProps {
  avatarImage?: string;
  bgImage?: string;
}

const Stage: React.FC<StageProps> = ({ avatarImage = '', bgImage = '' }) => {
  const gameRef = useRef<Phaser.Game | null>(null);
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const config: Phaser.Types.Core.GameConfig = {
      type: Phaser.AUTO,
      scale: {
        mode: Phaser.Scale.RESIZE,
        autoCenter: Phaser.Scale.CENTER_BOTH,
        parent: "game-container",
        width: "100%",
        height: "100%",
      },
      scene: {
        preload: preload,
        create: create,
      },
    };

    gameRef.current = new Phaser.Game(config);

    const resizeGame = () => {
      if (gameRef.current && containerRef.current) {
        const { width, height } = containerRef.current.getBoundingClientRect();
        gameRef.current.scale.resize(width, height);
      }
    };

    window.addEventListener("resize", resizeGame);

    return () => {
      window.removeEventListener("resize", resizeGame);
      gameRef.current?.destroy(true);
    };
  }, [avatarImage, bgImage]);

  function preload(this: Phaser.Scene) {
    if (bgImage) {
      this.load.image("background", bgImage);
    }
    this.load.image("player", "/src/assets/images/boy.png");
    if (avatarImage) {
      this.load.image("character", avatarImage);
    }
  }

  function create(this: Phaser.Scene) {
    const bg = this.add.image(0, 0, "background");
    bg.setOrigin(0, 0);

    const resizeBackground = () => {
      const { width, height } = this.cameras.main;
      const scaleX = width / bg.width;
      const scaleY = height / bg.height;
      const scale = Math.max(scaleX, scaleY);
      bg.setScale(scale);
      bg.setPosition(
        (width - bg.displayWidth) / 2,
        (height - bg.displayHeight) / 2
      );
    };

    resizeBackground(); // Call the resize function manually on initial load
    this.scale.on("resize", resizeBackground);

    const player = this.add.image(0, 0, "player");
    player.setOrigin(0.5, 1);
    this.scale.on("resize", () => {
      const desiredWidth = this.cameras.main.width * 0.1;
      const desiredHeight = this.cameras.main.height * 0.2;
      const scaleFactorX = desiredWidth / player.width;
      const scaleFactorY = desiredHeight / player.height;
      const scaleFactor = Math.min(scaleFactorX, scaleFactorY);
      player.setScale(scaleFactor * 1.5);
      player.setPosition(
        80,
        this.cameras.main.height - player.displayHeight / 2
      );
    });

    if (avatarImage) {
      const character = this.add.image(0, 0, "character");
      character.setOrigin(0.5, 1);
      this.scale.on("resize", () => {
        const desiredWidth = this.cameras.main.width * 0.15;
        const desiredHeight = this.cameras.main.height * 0.3;
        const scaleFactorX = desiredWidth / character.width;
        const scaleFactorY = desiredHeight / character.height;
        const scaleFactor = Math.min(scaleFactorX, scaleFactorY);
        character.setScale(scaleFactor * 2.3);
        character.setPosition(
          this.cameras.main.width - character.displayWidth / 2,
          this.cameras.main.height - character.displayHeight / 2
        );
      });

      // Highlighting on hover
      character.setInteractive();
      character.on("pointerover", () => {
        character.setTint(0xff0000);
      });
      character.on("pointerout", () => {
        character.clearTint();
      });
    }

    // Highlighting on hover
    player.setInteractive();
    player.on("pointerover", () => {
      player.setTint(0xff0000);
    });
    player.on("pointerout", () => {
      player.clearTint();
    });
  }

  return <div ref={containerRef} id="game-container" className="w-full h-full p-0 m-0" />;
};

export { Stage };

/Users/avio./dev/exodus-ai-game/src/components/NPCAvatar.tsx:
// src/components/NPCAvatar.tsx
import React from "react";
import { Avatar, AvatarFallback, AvatarImage } from "./Avatar";

interface NPCAvatarProps {
  image: string;
  name: string;
  description: string;
}

const NPCAvatar: React.FC<NPCAvatarProps> = ({ image, name, description }) => {
  return (
    <div className="flex flex-col mb-4 mt-1">
      <div className="flex flow-row justify-end">
        <div
          style={{ direction: "rtl" }}
          className="text-5xl font-bold text-yellow-400"
        >
          {name}
        </div>
        <Avatar className="w-12 h-12 ml-4">
          <AvatarImage alt={name} src={image} />
          <AvatarFallback>{name.slice(0, 2).toUpperCase()}</AvatarFallback>
        </Avatar>
      </div>
      <div className="flex flex-col text-right" style={{ direction: "rtl" }}>
        <p className="text-2xl font-bold text-yellow-200">{description}</p>
      </div>
    </div>
  );
};

export { NPCAvatar };

/Users/avio./dev/exodus-ai-game/src/components/StageElement.tsx:
import React from 'react';

interface StageElementProps {
  img: string;
  alt: string;
  className?: string;
}

const StageElement: React.FC<StageElementProps> = ({ img, alt, className }) => {
  return (
    <div className={`stage-element ${className}`}>
      <img src={img} alt={alt} className="w-full h-auto object-contain" />
    </div>
  );
};

export { StageElement };

/Users/avio./dev/exodus-ai-game/src/components/ContentPageContainer.tsx:
interface ContentPageContainerProps {
    children: React.ReactNode;
  }
  
  const ContentPageContainer : React.FC<ContentPageContainerProps> = ({ children }) => {
    return (
      <main className="p-5">{children}</main>
    );
  };
  
  export { ContentPageContainer };
  

/Users/avio./dev/exodus-ai-game/src/components/core/Button.tsx:
import React, { useState, useMemo } from "react";

interface ButtonProps {
  onClick?: () => void;
  disabled?: boolean;
  style?: React.CSSProperties;
  children: React.ReactNode;
}

export const Button: React.FC<ButtonProps> = ({
  onClick,
  disabled,
  style,
  children,
}) => {
  const [isActive, setIsActive] = useState(false);

  const handleClick = () => {
    if (!disabled) {
      setIsActive(true);
      onClick?.();
    }
  };

  const getButtonStyle = useMemo(() => {
    let style = "rounded-xl text-3xl py-2 px-2";

    if (disabled) {
      style += " bg-stone-700 cursor-not-allowed bg-opacity-50";
    } else if (isActive) {
      style += " bg-lime-600 bg-opacity-50";
    } else {
      style +=
        " bg-blue-400 bg-opacity-50 hover:bg-blue-500 hover:bg-opacity-50";
    }

    return style;
  }, [disabled, isActive]);


  return (
    <button
      disabled={disabled}
      className={`w-full ${getButtonStyle}`}
      onClick={handleClick}
      style={{ direction: "rtl" }}
    >
      {children}
    </button>
  );
};


/Users/avio./dev/exodus-ai-game/src/pages/Scenes.tsx:
import { observer } from "mobx-react-lite";
import { useRootStore } from "../store/commom/RootStoreContext";
import React, { useEffect } from "react";
import { SceneListItem } from "../components/SceneListItem";

const Scenes = observer(() => {
  const rootStore = useRootStore();

  useEffect(() => {
    rootStore.loadScenes();
  }, [rootStore]);

  return (
    <main className="bg-black">
      <div className="w-screen h-screen flex items-center justify-center">
        <div className="w-full aspect-video bg-main-scene bg-cover bg-no-repeat bg-center flex">
          <div className="w-8/12 m-4 relative content-end ">
            <div className="div flex flex-col p-2  bg-opacity-20 text-right">
              <div className=" text-9xl text-gray-700 font-bold">
                Exodus
              </div>
              <div className=" text-6xl    text-amber-700 font-bold" style={{direction:"rtl"}}>
                לספר יציאת מצרים עם AI
              </div>
            </div>
          </div>
          <div className="w-4/12 max-h-full p-3 flex justify-end items-end">
            <div
              className="w-full bg-teal-800 bg-opacity-70 p-2.5 h-full rounded-lg text-white overflow-hidden flex flex-col items-start"
              style={{ direction: "rtl" }}
            >
              <div className="p-2 text-5xl">סיפורים ודמויות</div>
              <div className="space-y-5 p-2 pt-4 pl-3 overflow-y-auto w-full">
                {rootStore.isLoadingScenes ? (
                  <div> אנא המתן...</div>
                ) : (
                  rootStore.scenes.map((scene) => (
                    <SceneListItem key={scene.key} scene={scene} />
                  ))
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  );
});

export { Scenes };


/Users/avio./dev/exodus-ai-game/src/pages/Home.tsx:
import { observer } from "mobx-react-lite";
import { useRootStore } from "../store/commom/RootStoreContext";
import GameView from "../components/GameView";
import React, { useCallback, useEffect, useRef } from "react";
import { IOption } from "../store/models/Option";
import { InteractionButton } from "../components/InteractionButton";
import { Button } from "../components/core/Button";
import { useParams } from "react-router-dom";

const Home = observer(() => {
  const { key } = useParams<{ key: string }>();
  const rootStore = useRootStore();
  const scene = rootStore.scenes.find((scene) => scene.key === key);
  const scrollContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (key) {
      rootStore.loadSceneDetails(key);
    }
  }, [key, rootStore]);

  const handleResetClick = async () => {
    try {
      const response = await fetch(
        `http://localhost:3000/reset/${scene?.chatId || "chat222152"}`,
        { method: "POST" }
      );
      // const response = await fetch(
      //   `http://localhost:3000/reset/${scene?.chatId}`,
      //   { method: "POST" }
      // );
      if (!response.ok) {
        throw new Error("Reset failed");
      }
      // Clear chat history and show initial state
      rootStore.resetInteractions();
      await rootStore.fetchInteraction("התחל", scene?.chatId || "");
    } catch (error) {
      console.error(error);
    }
  };

  const scrollToBottom = useCallback(() => {
    if (scrollContainerRef.current) {
      const container = scrollContainerRef.current;
      const startPosition = container.scrollTop;
      const endPosition = container.scrollHeight - container.clientHeight;
      const duration = 1000; // Animation duration in milliseconds

      let startTime: number | null = null;

      const animateScroll = (currentTime: number) => {
        if (!startTime) startTime = currentTime;
        const elapsedTime = currentTime - startTime;
        const scrollProgress = Math.min(elapsedTime / duration, 1);
        const scrollPosition =
          startPosition + (endPosition - startPosition) * scrollProgress;

        container.scrollTop = scrollPosition;

        if (elapsedTime < duration) {
          requestAnimationFrame(animateScroll);
        }
      };

      requestAnimationFrame(animateScroll);
    }
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [rootStore.Interactions, scrollToBottom]);

  const handleOptionClick = useCallback(
    async (option: IOption) => {
      option.setChosen(true);

      try {
        await rootStore.fetchInteraction(option.text, scene?.chatId || "");

        // Wait for the thinking indicator to be rendered
        setTimeout(() => {
          const thinkingIndicator = document.querySelector(
            ".thinking-indicator"
          );
          if (thinkingIndicator) {
            thinkingIndicator.scrollIntoView({
              behavior: "smooth",
              block: "end",
            });
          }
        }, 100);
      } catch (error) {
        console.error("Failed to fetch new stage:", error);
      }
    },
    [rootStore]
  );

  return (
    <main className="m-2 flex flex-col">
      <div className="flex px-6 pt-4 ">
        <div className="flex space-x-2  flex-auto">
          <Button disabled={false} onClick={handleResetClick}>
            התחל מחדש
          </Button>
          <Button disabled={false} onClick={handleResetClick}>
            חזור לתפריט
          </Button>
          <Button disabled={false} onClick={handleResetClick}>
            עורך תוכן
          </Button>
        </div>
      </div>

      <div className="flex p-4 h-[80vh]">
        <GameView
          onOptionClick={handleOptionClick}
          scrollContainerRef={scrollContainerRef}
          chatId={scene?.chatId || ""}
          bgImage={rootStore.sceneDetails?.bgImage || ""}
          avatarImage={rootStore.sceneDetails?.avatarImage || ""}
          avatarThumb={rootStore.sceneDetails?.avatarThumb || ""}
          avatarName={rootStore.sceneDetails?.["Item Name"] || ""}
          avatarDescription={rootStore.sceneDetails?.Summary || ""}
        />
      </div>
    </main>
  );
});

export { Home };


/Users/avio./dev/exodus-ai-game/src/pages/Test.tsx:
import React, { useState } from "react";
import { ContentContainer } from "../components/ContentContainer";

const Test = () => {
  return (
    <>
      <ContentContainer>hello from test page</ContentContainer>
    </>
  );
};

export { Test };


/Users/avio./dev/exodus-ai-game/src/pages/NotFound.tsx:
import { ContainerBGImage } from "../components/ContainerBGImage";
import { ContentContainer } from "../components/ContentContainer";
import { ContentPageContainer } from "../components/ContentPageContainer";

export const NotFound = () => {
  return (
    <ContentContainer>
      <ContainerBGImage bgImage="/not-found.png">
        <ContentPageContainer>
          <h1 className=" text-3xl mb-6">Whoops! The Chatbot Escaped</h1>
          <p>
            Looks like the chatbot you were looking for has gone rogue and
            escaped from our lab. Don't worry, our team of highly trained AI
            experts are on the case and are working tirelessly to catch it and
            bring it back. In the meantime, why not try chatting with one of our
            other chatbots? They promise to behave and stay within their
            designated areas. Thank you for your understanding and patience.
          </p>
        </ContentPageContainer>
      </ContainerBGImage>
    </ContentContainer>
  );
};


/Users/avio./dev/exodus-ai-game/src/services/api/SceneService.ts:
// src/services/api/SceneService.ts
import axios from "axios";
import { Instance } from "mobx-state-tree";
import { Scene } from "../../store/models/Scene";

const BASE_URL = "http://localhost:3000"; // Replace with your API endpoint

export const loadScenes = async (): Promise<Instance<typeof Scene>[]> => {
  try {
    const response = await axios.get(`${BASE_URL}/catalog`);
    const catalogItems = response.data;

    return catalogItems.map((item: any) =>
      Scene.create({
        key: item.catalogId,
        name: item.name,
        description: item.summary,
        chatId: item.catalogId,
        image: item.imageUrl // Use the imageUrl property from the API response
      })
    );
  } catch (error) {
    console.error("Error fetching catalog items:", error);
    return [];
  }
};

/Users/avio./dev/exodus-ai-game/src/services/api/InterationService.ts:
import axios from "axios";

const BASE_URL = 'http://localhost:3000/get_response'; // Replace with your API endpoint

export const getNextMessage = async (option: string, chatId: string) => {
  const response = await axios.post(BASE_URL, {
    chatId,
    text: option,
    itemId: "99",
    botId: "6738787627:AAEOkBmuMTo8B-i-TX9XzIrimfzDaM3N5zc"
  });
  return response.data.response;
};



/Users/avio./dev/exodus-ai-game/src/store/commom/RootStoreContext.ts:
import { createContext, useContext } from "react";
import { RootStore } from "../models/RootStore";
import { Instance } from "mobx-state-tree";


const RootStoreContext = createContext<Instance<typeof RootStore> | null>(null);

export const RootStoreProvider = RootStoreContext.Provider;

export const useRootStore = () => {
  const store = useContext(RootStoreContext);
  if (store === null) {
    throw new Error("Store cannot be null, please add a context provider");
  }
  return store;
};

export default RootStoreContext;


/Users/avio./dev/exodus-ai-game/src/store/models/RootStore.ts:
import { types, flow, Instance, getSnapshot } from "mobx-state-tree";
import { IInteraction, Interaction } from "./Interaction";
import { getNextMessage } from "../../services/api/InterationService";
import { OptionSnapshotIn } from "./Option";
import { Scene } from "./Scene";
import { loadScenes } from "../../services/api/SceneService";
import axios from "axios";

const RootStore = types.model('RootStore', {
  Interactions: types.array(Interaction),
  scenes: types.array(Scene),
  isLoadingScenes: types.optional(types.boolean, false),
  isLoading: types.optional(types.boolean, false),
  sceneDetails: types.maybe(types.frozen()),
  error: types.maybeNull(types.string)
}).actions(self => {
  const disablePreviousOptions = () => {
    if (self.Interactions.length > 0) {
      const lastInteraction = self.Interactions[self.Interactions.length - 1];
      lastInteraction.options.forEach(option => {
        if (!option.chosen) {
          option.setDisabled(true);
        }
      });
    }
  };
  return {

    loadScenes: flow(function* () {
      self.isLoadingScenes = true;
      try {
        const scenes = yield loadScenes();
        self.scenes = scenes;
      } catch (error) {
        console.error("Error loading scenes:", error);
      } finally {
        self.isLoadingScenes = false;
      }
    }),

    loadSceneDetails: flow(function* (sceneId: string) {
      try {

        const response = yield axios.get(`http://localhost:3000/catalog/${sceneId}`);
        self.sceneDetails = response.data;
      } catch (error) {
        console.error("Error loading scene details:", error);
      }
    }),



    addStage: (interactions: IInteraction) => {
      disablePreviousOptions();
      self.Interactions.push(interactions);
    },
    resetInteractions: () => {
      self.Interactions.clear();
    },
    fetchInteraction: flow(function* (option: string, chatId: string) {
      self.isLoading = true;
      try {
        const response: { text: string; options: string[] } = yield getNextMessage(option, chatId);
        disablePreviousOptions();
        self.Interactions.push({
          text: response.text,
          options: response.options.map(optionText => ({
            text: optionText,
            disabled: false,
            chosen: false
          }))
        });
      } catch (error: any) {
        self.error = error.message;
        console.error("Failed to fetch interaction", error);
      } finally {
        self.isLoading = false;
      }
    })
    
    
    
    
  };

});

// TypeScript interface to ensure type safety for the root store instance
export interface IRootStore extends Instance<typeof RootStore> { }

export { RootStore };

/Users/avio./dev/exodus-ai-game/src/store/models/Scene.ts:
// src/store/models/Scene.ts
import { types } from "mobx-state-tree";

const Scene = types.model("Scene", {
  key: types.identifier,
  name: types.string,
  description: types.optional(types.string, ""),
  image: types.optional(types.string, ""), // Add the image property
  chatId: types.string
});

export { Scene };



/Users/avio./dev/exodus-ai-game/src/store/models/Option.ts:
import { types, Instance, SnapshotIn, SnapshotOut } from 'mobx-state-tree';

const Option = types.model("Option", {
    text: types.string,
    disabled: types.optional(types.boolean, false),
    chosen: types.optional(types.boolean, false)
  }).actions(self => ({
    setDisabled(value: boolean) {
      self.disabled = value;
    },
    setChosen(value: boolean) {
      self.chosen = value;
    }
  }));

// Type exports for OptionModel
type IOption = Instance<typeof Option>;
type OptionSnapshotIn = SnapshotIn<typeof Option>;
type OptionSnapshotOut = SnapshotOut<typeof Option>;

export { Option };
export type { IOption, OptionSnapshotIn, OptionSnapshotOut };

/Users/avio./dev/exodus-ai-game/src/store/models/Interaction.ts:
import { types, Instance, SnapshotIn, SnapshotOut } from "mobx-state-tree";
import { Option } from "./Option";

const Interaction = types.model("Interaction", {
    text: types.string,
    options: types.array(Option)
});

// Type exports for Game model
type IInteraction = Instance<typeof Interaction>;
type InteractionSnapshotIn = SnapshotIn<typeof Interaction>;
type InteractionSnapshotOut = SnapshotOut<typeof Interaction>;

export { Interaction };
export type { IInteraction, InteractionSnapshotIn, InteractionSnapshotOut };


